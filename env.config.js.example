// `.env.config.js` should be added to .gitignore.

// `@datadog/browser-rum` ideally should not be installed in any Open edX MFEs/JS libraries
// package.json files to remain open-source friendly. Assumes there is configuration in edx-internal
// to specify custom NPM packages to install at build+deploy time (not committed in Open edX code),
// similar to the `NPM_ALIASES` approach of overriding default NPM packages from the Open edX platform.
//
// If this assumption cannot be met, then relying on the CDN (async) could also be viable. For example, setting
// a 2U/edX-specific environment variable to specify the DataDog RUM script CDN URL to load from that's consistent
// across MFEs.
import { datadogRum } from '@datadog/browser-rum';

/**
 * @name LoggingService
 * @interface
 * @memberof module:Logging
 * @property {function} logError
 * @property {function} logInfo
 */

/**
 * Defines a custom DataDog-compatible LoggingService to use within `@edx/frontend-platform`'s
 * `initialize` function, overriding the default `NewRelicLoggingService`.
 * @implements {LoggingService}
 */
class DataDogLoggingService {
  constructor() {
    // Initialize the DataDog RUM agent
    datadogRum.init({
      applicationId: '<DATADOG_APPLICATION_ID>',
      // applicationId: process.env.DATADOG_APPLICATION_ID,
      clientToken: '<DATADOG_CLIENT_TOKEN>',
      // clientToken: process.env.DATADOG_CLIENT_TOKEN,
      // `site` refers to the Datadog site parameter of your organization
      // see https://docs.datadoghq.com/getting_started/site/
      site: '<DATADOG_SITE>',
      // site: process.env.DATADOG_SITE,
      //  service: 'my-web-application',
      //  env: 'production',
      //  version: '1.0.0',
      sessionSampleRate: 100,
      sessionReplaySampleRate: 100,
      trackResources: true,
      trackLongTasks: true,
      trackUserInteractions: true,
    });
  }

  /**
   * @param {string|Error} errorStringOrObject
   * @param {Object} [customAttributes={}]
   */
  logError(errorStringOrObject, customAttributes = {}) {
    console.error('[DataDogLoggingService]', errorStringOrObject);
    datadogRum.addError(errorStringOrObject, customAttributes);
  }

  /**
   * @param {string} infoString
   * @param {Object} [customAttributes={}]
   */
  logInfo(infoString, customAttributes = {}) {
    datadogRum.addAction(infoString, customAttributes);
  }
}

const config = {
  loggingService: DataDogLoggingService,
};

export default config;
